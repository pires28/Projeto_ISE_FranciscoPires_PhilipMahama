#include <NewPing.h>
// ---------------------------------------------------------------------------
// This example code was used to successfully communicate with 15 ultrasonic sensors. You can adjust
// the number of sensors in your project by changing SONAR_NUM and the number of NewPing objects in the
// "sonar" array. You also need to change the pins for each sensor for the NewPing objects. Each sensor
// is pinged at 33ms intervals. So, one cycle of all sensors takes 495ms (33 * 15 = 495ms). The results
// are sent to the "oneSensorCycle" function which currently just displays the distance data. Your project
// would normally process the sensor results in this function (for example, decide if a robot needs to
// turn and call the turn function). Keep in mind this example is event-driven. Your complete sketch needs
// to be written so there's no "delay" commands and the loop() cycles at faster than a 33ms rate. If other
// processes take longer than 33ms, you'll need to increase PING_INTERVAL so it doesn't get behind.
// ---------------------------------------------------------------------------
#include <NewPing.h>

#define SONAR_NUM     2 // Number of sensors.
#define MAX_DISTANCE 33 // Maximum distance (in cm) to ping.
#define MAX_DISTANCE2 25 // Maximum distance (in cm) to ping.
#define PING_INTERVAL 33 // Milliseconds between sensor pings (29ms is about the min to avoid cross-sensor echo).

int A, B; //definition of X and Y values where A is X

unsigned long pingTimer[SONAR_NUM]; // Holds the times when the next ping should happen for each sensor.
unsigned int cm[SONAR_NUM];         // Where the ping distances are stored.
uint8_t currentSensor = 0;          // Keeps track of which sensor is active.c

NewPing sonar[SONAR_NUM] = {     // Sensor object array.
  NewPing(12, 11, MAX_DISTANCE), // Each sensor's trigger pin, echo pin, and max distance to ping.
  NewPing(7, 4, MAX_DISTANCE2)
};

void setup() {
  Serial.begin(9600);
  pingTimer[0] = millis() + 75;           // First ping starts at 75ms, gives time for the Arduino to chill before starting.
  for (uint8_t i = 1; i < SONAR_NUM; i++) // Set the starting time for each sensor.
    pingTimer[i] = pingTimer[i - 1] + PING_INTERVAL;
}

void loop() {
  for (uint8_t i = 0; i < SONAR_NUM; i++) { // Loop through all the sensors.
    if (millis() >= pingTimer[i]) {         // Is it this sensor's time to ping?
      pingTimer[i] += PING_INTERVAL * SONAR_NUM;  // Set next time this sensor will be pinged.

      sonar[currentSensor].timer_stop();          // Make sure previous timer is canceled before starting a new ping (insurance).
      currentSensor = i;                          // Sensor being accessed.

      /*if(cm[0] >= 1 || cm[1] >= 1){
        tone(buzzer,1500); 
        delay[500];
      }
      else
        noTone(buzzer);*/
        
      cm[currentSensor] = 0;                      // Make distance zero in case there's no ping echo for this sensor.
      sonar[currentSensor].ping_timer(echoCheck); // Do the ping (processing continues, interrupt will call echoCheck to look for echo).
      
      oneSensorCycle(); // Sensor ping cycle complete, do something with the results.
      
    }
  }
  //oneSensorCycle();
  // Other code that *DOESN'T* analyze ping results can go here.
}

void echoCheck() { // If ping received, set the sensor distance to array.
  if (sonar[currentSensor].check_timer())
    cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
}

void printLocation(){
    Serial.println("************************************");
    Serial.println("| SISTEMA DE DETECCAO DE PRESENÃ‡A |");
    if((cm[0] >= MAX_DISTANCE || cm[1] >= MAX_DISTANCE2) || (cm[0] < 1 || cm[1] < 1) ){
      Serial.print("| FORA DO ALCANCE!!!");
    }
    else{
      Serial.print("| LINHA: ");
      Serial.print(cm[0]);
      Serial.print("cm");
      Serial.print("   COLUNA: ");
      Serial.print(cm[1]);
      Serial.print("cm");
    }
    Serial.println(" |");
    Serial.println("************************************");
}

void oneSensorCycle() { // Sensor ping cycle complete, do something with the results.
  // The following code would be replaced with your code that does something with the ping results.
  printLocation();
  /*for (uint8_t i = 0; i < SONAR_NUM; i++) {
    Serial.print(i);
    Serial.print("=");
    Serial.print(cm[i]);
    Serial.print("cm ");
  }
  Serial.println();*/
  
  int linha, coluna;
  int MAX_LINHA = (MAX_DISTANCE2);
  int MAX_COLUNA = (MAX_DISTANCE);
    printLocation();

    if((cm[0] <= MAX_DISTANCE || cm[1] <= MAX_DISTANCE2) || (cm[0] > 1 || cm[1] > 1) ){
      for(linha = 0; linha <= MAX_LINHA; linha++){
          Serial.print("|");
          for(coluna = 0; coluna <= MAX_COLUNA; coluna++){
              if(linha == cm[0] && coluna == cm[1]){
                  Serial.print("X");}
              else{
                  if(linha == 0 || linha == MAX_LINHA)
                      Serial.print("-");
                  else{
                      if(coluna == MAX_COLUNA)
                          Serial.print("|");
                      else
                          Serial.print(" ");
                  }
              }
          }
          Serial.println();
      }
    }
    
    delay(10000); //delay 3 seconds to write again
}
